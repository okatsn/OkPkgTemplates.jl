var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OkPkgTemplates","category":"page"},{"location":"#OkPkgTemplates","page":"Home","title":"OkPkgTemplates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkPkgTemplates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OkPkgTemplates]","category":"page"},{"location":"#OkPkgTemplates.commit_msg","page":"Home","title":"OkPkgTemplates.commit_msg","text":"Notice\n\nCurrently, you have to add\n\n    client-payload: '{\"commit_msg\": \"${{ github.event.commits[0].message }}\"}'\n\n\nin register.yml manually.\n\nIn register.yml:\n\nwith Options for name: Trigger next workflow:\n\nclient-payload: passes data from Workflow 1 to Workflow 2\nExample:\nwith:\n  client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\nCommit message can be obtained from both\n${{ github.event.commits[0].message }} and\n${{ github.event.head_commit.message }}\n(Not sure) the latter one could be empty\n(Not sure) error with the latter one could result from permission: content: false\nIt is possible to Iterating over github.event.commits or use join function to concatenate commits.\nAlternative way to Get a commit using curl.\nAlso see github context for what others are available.\nNoted that multiline string is not acceptable for json, you have to use e.g. \"# hello\\n second line\" istead as the commit message where Project.toml version is raised.\n\nBe aware if you have in several un-pushed commits that changes 'Project.toml', and push them at once, \"commit_msg\": \"${{ github.event.commits[0].message will be the first commit and it is not necessarily the commit to be registered. UpdateOkReg register a version for this package at the latest commit being pushed.\n\nNotice\n\nAs the latest commit you push is not necessary the commit you want to register, unexpected results will occurr if you push several commits among either of them 'Project.toml' is modified.\n\nFor example:\n\nYou have in several un-pushed commits that changes 'Project.toml', and push them at once, it register the version number of the lastest commit BUT client_payload (client-payload in register.yml) store and pass the information of the earliest commit in your push.\nYou add [compat] at the first commit with message \"Fix compatibility\", and increase the version number with message \"New keyword args. mkpath for mv2dir ...\". Both modify Project.toml, and the last one is registered but in release log it shows only \"Fix compatibility\".\n\nIf you want to automatically add commit message release note of the registered commit but you are too lazy to create pull requests since you are almost the only person working on YourPackage, please\n\npush everything else before you increase the version number, and\npush only the Project.toml with commit message you'd like to be adopted as release note.\n\n\n\n\n\n","category":"constant"},{"location":"#OkPkgTemplates.logfile_msg","page":"Home","title":"OkPkgTemplates.logfile_msg","text":"\n\n\n\n","category":"constant"},{"location":"#OkPkgTemplates.PLUGIN_REGISTER-Tuple{}","page":"Home","title":"OkPkgTemplates.PLUGIN_REGISTER","text":"PLUGIN_REGISTER() by default uses templates in /home/runner/work/OkPkgTemplates.jl/OkPkgTemplates.jl/mypkgtemplates/for_okregistry/github/workflows/register.yml.\n\nIn the default template, job attempts to register the latest pushed commit of YourPackage where Project.toml is modified. If success, TagBot.yml will be triggered. See also PLUGIN_TAGBOT.\n\nIf Project.toml is modified but version number unchanged, it simply failed and you don't have to worry about anything.\n\nKnown issue\n\nAccording to the default \"register.yml\", in the workflow \"Register Package to OkRegistry\" both the repo of YourPackage and OkRegistry is checked out, and register YourPackage to OkRegistry using PAT ACCESS_OKREGISTRY token that must be provided in advance via your Github account. By default,  actions/checkout checkout the commit of the pushed event.\n\nAfter the current version is successfully registerd, TagBot will be triggered. However, if there is something wrong in tagging the previous version, that is a version exists in OkRegistry but failed to be tagged with TagBot, TagBot will stop at that version; and thus, succeeding versions cannot be tagged. See README for trouble shooting.\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.PLUGIN_TAGBOT-Tuple{}","page":"Home","title":"OkPkgTemplates.PLUGIN_TAGBOT","text":"PLUGIN_TAGBOT() returns an PkgTemplates.TagBot. You can redefine this function.\n\nBy default it add github.event.client_payload.logfile_msg as part of the release note. Please must read Known issue in the doc of PLUGIN_REGISTER().\n\nChangelog\n\nFor variables that you can use in the changelog template, see line 174-184, tagbot/action/changelog.py and TagBot/Changelogs. Which are\n\n\"compare_url\"\n\"custom\"\n\"issues\"\n\"package\"\n\"previous_release\"\n\"pulls\"\n\"sha\"\n\"version\"\n\"version_url\"\n\nAlso see\n\nDefault changelog template.\n\nMore information\n\nsee PkgTemplates/src/plugins/tagbot.jl.\nIf your registry is public, you don't need to provide token. For more information, see here\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.chkdest-Tuple{}","page":"Home","title":"OkPkgTemplates.chkdest","text":"chkdest() return Pkg.devdir() if DEFAULT_DESTINATION() is empty.\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.copymyfiles_script-Tuple{Any, Any}","page":"Home","title":"OkPkgTemplates.copymyfiles_script","text":"Copy some files from repo0 to repo1. List of files:\n\nAll files under .github/workflows\n\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.mypkgtemplate_dir-Tuple{Vararg{AbstractString}}","page":"Home","title":"OkPkgTemplates.mypkgtemplate_dir","text":"Return a path relative to the default template file directory (OkPkgTemplates/mypkgtemplates).\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.pkgtemplating_script-Tuple{Any, Any}","page":"Home","title":"OkPkgTemplates.pkgtemplating_script","text":"pkgtemplating_script(dest, yourpkgname) returns the script of PkgTemplates (quote ... end) to be executed at the scope that the macro is called.\n\nIt\n\ncreates a package using PkgTemplates.Templates\nadd Documenter, CompatHelperLocal, Test into Project.toml\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.stringscore-Tuple{Any}","page":"Home","title":"OkPkgTemplates.stringscore","text":"stringscore(str) gives an absolute score for a string; the order of score from large to small corresponds to the alphabetical order. For a string less than 100 characters, the score should not exceeds one.\n\nExample\n\njulia> stringscore.([\"AAA\", \"Aa\", \"BCD\"])\n3-element Vector{Float64}:\n 0.0656565\n 0.06597\n 0.06667680000000001\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.updateprojtoml_script-Tuple{Any, Any}","page":"Home","title":"OkPkgTemplates.updateprojtoml_script","text":"After making the template successfully, add \"Documenter\", \"CompatHelperLocal\" to [extras] and [targets] as runtests.jl (may) use them.\n\nupdateprojtoml_script(dest, yourpkgname) creates script that projtoml_path = joinpath(dest, yourpkgname, \"Project.toml\") will be modified on execution.\n\nIt modify Project.toml by add [extras] and [targets] for the scope of Test.\n\n\n\n\n\n","category":"method"},{"location":"#OkPkgTemplates.@genpkg-Tuple{String}","page":"Home","title":"OkPkgTemplates.@genpkg","text":"genpkg(yourpkgname::String) generate your package using presets.\n\nIf OkPkgTemplates.DEFAULT_DESTINATION() returns an empty string, it use Pkg.devdir() at user's scope.\n\nIn julia REPL,\n\nkey in OkPkgTemplates.DEFAULT_ and [tab] to list all functions that returns default variables\nkey in OkPkgTemplates.PLUGIN_ and [tab] to list all functions that returns ::PkgTemplates.Plugin presets.\n\nRedefine these functions in the local scope to assign the variable.\n\nExample\n\nTo specify output destination, redefine DEFAULT_DESTINATION()\n\nOkPkgTemplates.DEFAULT_DESTINATION() = pwd()\n\nand then generate the Package\n\n@genpkg \"MyNewProject\"\n\nnote: Note\nFeel free to redefine OkPkgTemplates.DEFAULT_...\n\nwarning: Warning\nIn the following cases, write a new macro of your own referencing @genpkg instead, or just use PkgTemplates as instructed:If you have the thought to redefine OkPkgTemplates.PLUGIN_...\nIf you want to set PkgTemplates.user_view (for example)\n\nAlso see the helps\n\ncopymyfiles_script\nupdateprojtoml_script\n\n\n\n\n\n","category":"macro"},{"location":"#OkPkgTemplates.@upactions-Tuple{}","page":"Home","title":"OkPkgTemplates.@upactions","text":"Replace Github Actions (all the files in .github/workflows) with the latest version that generated from OkPkgTemplates. Noted that julia enviroment should be activated in the current directory for your package in dev to update.\n\nwarning: Warning\nMake sure all your action files (all the files in .github/workflows) is under the control of git for safety.\n\nAlso see the helps\n\ncopymyfiles_script\nupdateprojtoml_script\n\n\n\n\n\n","category":"macro"}]
}
